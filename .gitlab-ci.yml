# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled
before_script:
  - apt-get update -qq && apt-get install

# You specify the stages. Those are the steps that GitLab will go through
# Order matters.
stages:
  - build
  - deploy

Build next:
  image: node:10-alpine
  stage: build
  environment:
    name: next
  before_script:
    - yarn install
  script:
    - yarn run build-next
  artifacts:
    expire_in: 1 day
    paths:
      - public
  only:
    refs:
      - branches

Build production:
  image: node:10-alpine
  stage: build
  environment:
    name: production
  before_script:
    - yarn install
  script:
    - yarn run build
  artifacts:
    expire_in: 1 day
    paths:
      - public
  only:
    refs:
      - master

Deploy to Staging:
  image: alpine
  stage: deploy
  before_script:
    # Generates to connect to the server with SSH key.
    - mkdir -p ~/.ssh
    - echo -e "$SSH_RSA_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600  ~/.ssh/id_*
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - apk add --no-cache rsync openssh
    - sh ./scripts/deploy/gitlab-staging.sh
  only:
    refs:
      - next

Deploy to Production:
  image: alpine
  stage: deploy
  before_script:
    # Generates to connect to the server with SSH key.
    - mkdir -p ~/.ssh
    - echo -e "$SSH_RSA_PRIVATE_KEY_PROD" > ~/.ssh/id_rsa
    - chmod 600  ~/.ssh/id_*
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - apk add --no-cache rsync openssh
    - sh ./scripts/deploy/gitlab-production.sh
  only:
    refs:
      - master
